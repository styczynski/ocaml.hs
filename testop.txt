let (==) a b = value_eq a b in
let (<) a b = value_lt a b in
let (>) a b = value_gt a b in
let (<=) a b = value_lt_eq a b in
let (>=) a b = value_gt_eq a b in
let cons a b = value_cons a b in
let (||) a b = value_or a b in
let (&&) a b = value_and a b in
let (!) a = value_not a in
let (-) a b = value_sub a b in
let (+) a b = value_add a b in
let (*) a b = value_mul a b in
let (/) a b = value_div a b in

let rec length_aux len = function
    [] -> len
  | _::l -> length_aux (len + 1) l
in

let tl = function
    [] -> failwith "tl"
  | _::l -> l
in

let hd = function
    [] -> failwith "hd"
  | a::_ -> a
in

let nth l n =
  if n < 0 then invalid_arg "List.nth" else
  let rec nth_aux l n =
    match l with
    | [] -> failwith "nth"
    | a::l -> if n == 0 then a else nth_aux l (n-1)
  in nth_aux l n
in

let nth_opt l n =
  if n < 0 then invalid_arg "List.nth" else
  let rec nth_aux l n =
    match l with
    | [] -> None
    | a::l -> if n == 0 then Some a else nth_aux l (n-1)
  in nth_aux l n
in

let rec append l1 l2 =
  match l1 with
    [] -> l2
  | a :: l -> cons a (append l l2)
in

let (@) l1 l2 = append l1 l2 in

[1;3] @ [4;5]
;;
