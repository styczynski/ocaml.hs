IRoot.          Implementation      ::= [ImplPhrase] ;
terminator nonempty ImplPhrase ";;" ;
separator Ident "" ;

IPhrase.        ImplPhrase          ::= ComplexExpression ;
IDefType.        ImplPhrase          ::= TypeDef ;



TypeDefVarP.       TypeDef             ::= "type" Ident "=" "|" [TDefVariant] ;
TypeDefVar.        TypeDef             ::= "type" Ident "=" [TDefVariant] ;

TDefVarCompl.       TDefVariant            ::= Ident "of" Ident [Ident] ;
TDefVarSimpl.      TDefVariant            ::= Ident ;
separator nonempty TDefVariant "|" ;

PList.          PList       ::= "[" [PListElement] "]" ;
PListElement.     PListElement    ::= SimplePattern ;
separator PListElement ";" ;

PTuple. PTuple ::= PTupleElement "," [PTupleElement] ;
PTupleElement. PTupleElement ::= SimplePattern1 ;
separator nonempty PTupleElement "," ;

PatList.        SimplePattern2      ::= PList ;
PatNone.        SimplePattern2      ::= "_" ;
PatIdent.       SimplePattern2      ::= Ident ;
PatConst.       SimplePattern2      ::= Constant ;
PatCons.        SimplePattern1      ::= SimplePattern2 "::" SimplePattern1 ;
PatTuple.       SimplePattern       ::= PTuple ;

coercions       SimplePattern       2 ;
separator       SimplePattern       "" ;

ExprCompl.      Expression6         ::= "(" ComplexExpression ")" ;
ExprList.       Expression6         ::= DList ;
ExprConst.      Expression6         ::= Constant ;
ExprCall.       Expression6         ::= Ident [SimpleExpression];
Expr6.          Expression5         ::= PrefixOperator Expression6 ;
Expr5.          Expression4         ::= Expression4 InfixOperatorE Expression5 ;
Expr4.          Expression3         ::= Expression3 InfixOperatorD Expression4 ;
Expr3.          Expression2         ::= Expression2 InfixOperatorC Expression3 ;
Expr2.          Expression1         ::= Expression2 InfixOperatorB Expression1 ;
Expr1.          Expression          ::= Expression1 InfixOperatorA Expression ;

coercions Expression 6 ;

ESConst.        SimpleExpression    ::= Constant ;
ESIdent.        SimpleExpression    ::= Ident ;
ESExpr.         SimpleExpression    ::= "(" Expression ")" ;
ESList.         SimpleExpression       ::= DList ;
separator SimpleExpression "" ;

ECExpr.          ComplexExpression       ::= Expression ;
ECTuple.          ComplexExpression       ::= DTuple ;
ECFun.           ComplexExpression       ::= "fun" SimplePattern [SimplePattern] "->" ComplexExpression ;
ECLet.          ComplexExpression       ::= "let" SimplePattern [SimplePattern] "=" ComplexExpression "in" ComplexExpression ;
ECIf.            ComplexExpression       ::= "if" ComplexExpression "then" ComplexExpression "else" ComplexExpression ;
ECWhile.         ComplexExpression       ::= "while" ComplexExpression "do" ComplexExpression "done" ;
ECFor.           ComplexExpression       ::= "for" Ident "=" ComplexExpression ForDirection ComplexExpression "do" ComplexExpression "done" ;

DList.          DList       ::= "[" [ListElement] "]" ;
ListElement.     ListElement    ::= ComplexExpression ;
separator ListElement ";" ;

DTuple. DTuple ::= DTupleElement "," [DTupleElement] ;
DTupleElement. DTupleElement ::= Expression ;
separator nonempty DTupleElement "," ;

ForDirTo.       ForDirection        ::= "to" ;
ForDirDownTo.   ForDirection        ::= "downto" ;

OpOr.           InfixOperatorA      ::= "||" ;
OpAnd.          InfixOperatorB      ::= "&&" ;
OpJoin.         InfixOperatorB      ::= "@" ;
OpCons.         InfixOperatorB      ::= "::" ;
OpEq.           InfixOperatorC      ::= "=" ;
OpEqSt.         InfixOperatorC      ::= "==" ;
OpNEq.          InfixOperatorC      ::= "<>" ;
OpNEqSt.        InfixOperatorC      ::= "!=" ;
OpLt.           InfixOperatorC      ::= "<" ;
OpLtD.          InfixOperatorC      ::= "<." ;
OpGt.           InfixOperatorC      ::= ">" ;
OpGtD.          InfixOperatorC      ::= ">." ;
OpLtEq.         InfixOperatorC      ::= "<=" ;
OpLtEqD.        InfixOperatorC      ::= "<=." ;
OpGtEq.         InfixOperatorC      ::= ">=" ;
OpGtEqD.        InfixOperatorC      ::= ">=." ;
OpAdd.          InfixOperatorD      ::= "+" ;
OpAddD.         InfixOperatorD      ::= "+." ;
OpSub.          InfixOperatorD      ::= "-" ;
OpSubD.         InfixOperatorD      ::= "-." ;
OpMul.          InfixOperatorE      ::= "*" ;
OpDiv.          InfixOperatorE      ::= "/" ;
OpNot.          PrefixOperator      ::= "!" ;
OpNeg.          PrefixOperator      ::= "-" ;
OpNegD.         PrefixOperator      ::= "-." ;

CInt.           Constant            ::= Integer ;
CString.        Constant            ::= String ;
CBool.          Constant            ::= ConstantBool ;

CBTrue.         ConstantBool        ::= "true" ;
CBFalse.        ConstantBool        ::= "false" ;

