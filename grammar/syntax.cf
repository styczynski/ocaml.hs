IRoot.               Implementation      ::= [ImplPhrase] ;
terminator           nonempty            ImplPhrase ";;" ;
separator            Ident               "" ;

IPhrase.             ImplPhrase          ::= ComplexExpression ;
IDefType.            ImplPhrase          ::= TypeDef ;


TypeExprString.      TypeExpression2     ::= "string" ;
TypeExprBool.        TypeExpression2     ::= "bool" ;
TypeExprInt.         TypeExpression2     ::= "int" ;
TypeExprList.        TypeExpression2     ::= "[" TypeExpression "]" ;
TypeExprTuple.       TypeExpression1     ::= TypeExpression1 "*" TypeExpression2 ;
TypeFun.             TypeExpression      ::= TypeExpression "->" TypeExpression1 ;

coercions            TypeExpression      2 ;


TypeDefVarP.         TypeDef             ::= "type" Ident "=" "|" [TDefVariant] ;
TypeDefVar.          TypeDef             ::= "type" Ident "=" [TDefVariant] ;
TypeDefRecord.       TypeDef             ::= "type" Ident "=" "{" [TDefRecord] "}" ;

TDefVarCompl.        TDefVariant         ::= Ident "of" TypeExpression ;
TDefVarSimpl.        TDefVariant         ::= Ident ;
separator nonempty   TDefVariant         "|" ;

TDefRecord.          TDefRecord          ::= Ident ":" TypeExpression ;
separator nonempty   TDefRecord          ";" ;

PList.               PList               ::= "[" [PListElement] "]" ;
PListElement.        PListElement        ::= SimplePattern ;
separator            PListElement        ";" ;

PTuple.              PTuple              ::= PTupleElement "," [PTupleElement] ;

PTupleElement.       PTupleElement       ::= SimplePattern1 ;
separator nonempty   PTupleElement       "," ;

PatConstr.           SimplePattern2      ::= "(" Ident SimplePattern2 ")" ;
PatList.             SimplePattern2      ::= PList ;
PatNone.             SimplePattern2      ::= "_" ;
PatIdent.            SimplePattern2      ::= Ident ;
PatConst.            SimplePattern2      ::= Constant ;
PatCons.             SimplePattern1      ::= SimplePattern2 "::" SimplePattern1 ;
PatTuple.            SimplePattern       ::= PTuple ;

coercions            SimplePattern       2 ;
separator            SimplePattern       "" ;

ExprCompl.           Expression6         ::= "(" ComplexExpression ")" ;
ExprList.            Expression6         ::= DList ;
ExprRecord.          Expression6         ::= DataRecord ;
ExprConst.           Expression6         ::= Constant ;
ExprCall.            Expression6         ::= Ident [SimpleExpression];
ExprSel.             Expression6         ::= Expression6 "." Ident ;
Expr6.               Expression5         ::= PrefixOperator Expression6 ;
Expr5.               Expression4         ::= Expression4 InfixOperatorE Expression5 ;
Expr4.               Expression3         ::= Expression3 InfixOperatorD Expression4 ;
Expr3.               Expression2         ::= Expression2 InfixOperatorC Expression3 ;
Expr2.               Expression1         ::= Expression2 InfixOperatorB Expression1 ;
Expr1.               Expression          ::= Expression1 InfixOperatorA Expression ;

coercions            Expression          6 ;

ESConst.             SimpleExpression    ::= Constant ;
ESIdent.             SimpleExpression    ::= Ident ;
ESExpr.              SimpleExpression    ::= "(" ComplexExpression ")" ;
ESList.              SimpleExpression    ::= DList ;
ESRecord.            SimpleExpression    ::= DataRecord ;
separator            SimpleExpression    "" ;

ECExpr.              ComplexExpression   ::= Expression ;
ECTuple.             ComplexExpression   ::= DTuple ;
ECFun.               ComplexExpression   ::= "fun" SimplePattern [SimplePattern] "->" ComplexExpression ;
ECLet.               ComplexExpression   ::= "let" LetRecKeyword SimplePattern [SimplePattern] "=" ComplexExpression "in" ComplexExpression ;
ECFunction.          ComplexExpression   ::= "function" [MatchClause] ;
ECMatch.             ComplexExpression   ::= "match" ComplexExpression "with" [MatchClause] ;
ECIf.                ComplexExpression   ::= "if" ComplexExpression "then" ComplexExpression "else" ComplexExpression ;
ECWhile.             ComplexExpression   ::= "while" ComplexExpression "do" ComplexExpression "done" ;
ECFor.               ComplexExpression   ::= "for" Ident "=" ComplexExpression ForDirection ComplexExpression "do" ComplexExpression "done" ;

LetRecNo.            LetRecKeyword       ::= "" ;
LetRecYes.           LetRecKeyword       ::= "rec" ;

MatchClause.         MatchClause         ::=  SimplePattern "->" ComplexExpression ;
separator nonempty   MatchClause         "|" ;

DataRecord.          DataRecord          ::= "{" [RecordElement] "}" ;
RecordElement.       RecordElement       ::= Ident "=" ComplexExpression ;
separator nonempty   RecordElement       ";" ;

DList.               DList               ::= "[" [ListElement] "]" ;
ListElement.         ListElement         ::= ComplexExpression ;
separator            ListElement         ";" ;

DTuple.              DTuple              ::= DTupleElement "," [DTupleElement] ;
DTupleElement.       DTupleElement       ::= Expression ;
separator nonempty   DTupleElement       "," ;

ForDirTo.            ForDirection        ::= "to" ;
ForDirDownTo.        ForDirection        ::= "downto" ;

OpOr.                InfixOperatorA      ::= "||" ;
OpAnd.               InfixOperatorB      ::= "&&" ;
OpJoin.              InfixOperatorB      ::= "@" ;
OpCons.              InfixOperatorB      ::= "::" ;
OpEq.                InfixOperatorC      ::= "=" ;
OpEqSt.              InfixOperatorC      ::= "==" ;
OpNEq.               InfixOperatorC      ::= "<>" ;
OpNEqSt.             InfixOperatorC      ::= "!=" ;
OpLt.                InfixOperatorC      ::= "<" ;
OpLtD.               InfixOperatorC      ::= "<." ;
OpGt.                InfixOperatorC      ::= ">" ;
OpGtD.               InfixOperatorC      ::= ">." ;
OpLtEq.              InfixOperatorC      ::= "<=" ;
OpLtEqD.             InfixOperatorC      ::= "<=." ;
OpGtEq.              InfixOperatorC      ::= ">=" ;
OpGtEqD.             InfixOperatorC      ::= ">=." ;
OpAdd.               InfixOperatorD      ::= "+" ;
OpAddD.              InfixOperatorD      ::= "+." ;
OpSub.               InfixOperatorD      ::= "-" ;
OpSubD.              InfixOperatorD      ::= "-." ;
OpMul.               InfixOperatorE      ::= "*" ;
OpDiv.               InfixOperatorE      ::= "/" ;
OpNot.               PrefixOperator      ::= "!" ;
OpNeg.               PrefixOperator      ::= "-" ;
OpNegD.              PrefixOperator      ::= "-." ;

CInt.                Constant            ::= Integer ;
CString.             Constant            ::= String ;
CBool.               Constant            ::= ConstantBool ;

CBTrue.              ConstantBool        ::= "true" ;
CBFalse.             ConstantBool        ::= "false" ;

