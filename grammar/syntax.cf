comment "(*" "*)" ;

IRoot.               Implementation          ::= [ImplementationCore] ;
separator nonempty ImplementationCore ";;" ;

IRootDef.            ImplementationCore      ::= [ImplPhrase] ;
IRootExpr.           ImplementationCore      ::= ComplexExpression ;
terminator           nonempty            ImplPhrase "" ;
separator            Ident               "" ;

IGlobalLet.          ImplPhrase          ::= "let" LetRecKeyword SimplePattern [SimplePattern] TypeConstraint "=" ComplexExpression ;
IDefType.            ImplPhrase          ::= TypeDef ;

token TypeIdentAbstract (["abcdefghijklmnopqrstuvwxyz"] ["'"]) ;

TypeExprEmpty.    TypeExpression1     ::= "unit" ;
TypeExprAbstract.    TypeExpression2     ::= TypeIdentAbstract;
TypeExprIdent.    TypeExpression2     ::= Ident;
TypeExprList.        TypeExpression2     ::= "[" TypeExpression "]" ;
TypeExprTuple.       TypeExpression1     ::= TypeExpression2 "*" [TypeExpression2] ;
separator nonempty TypeExpression2 "*" ;
TypeFun.             TypeExpression      ::= TypeExpression1 "->" TypeExpression ;

coercions            TypeExpression      2 ;

TypeConstrDef.      TypeConstraint      ::= ":" TypeExpression ;
TypeConstrEmpty.    TypeConstraint      ::= "" ;

TypeDefVarP.         TypeDef             ::= "type" Ident "=" "|" [TDefVariant] ;
TypeDefVar.          TypeDef             ::= "type" Ident "=" [TDefVariant] ;
TypeDefRecord.       TypeDef             ::= "type" Ident "=" "{" [TDefRecord] "}" ;

TDefVarCompl.        TDefVariant         ::= Ident "of" TypeExpression ;
TDefVarSimpl.        TDefVariant         ::= Ident ;
separator nonempty   TDefVariant         "|" ;

TDefRecord.          TDefRecord          ::= Ident ":" TypeExpression ;
separator nonempty   TDefRecord          ";" ;

PList.               PList               ::= "[" [PListElement] "]" ;
PListElement.        PListElement        ::= SimplePattern ;
separator            PListElement        ";" ;

PTuple.              PTuple              ::= PTupleElement "," [PTupleElement] ;

PTupleElement.       PTupleElement       ::= SimplePattern1 ;
separator nonempty   PTupleElement       "," ;

PatConstr.           SimplePattern2      ::= "(" Ident SimplePattern2 ")" ;
PatList.             SimplePattern2      ::= PList ;
PatNone.             SimplePattern2      ::= "_" ;
PatIdent.            SimplePattern2      ::= Ident ;
PatConst.            SimplePattern2      ::= Constant ;
PatCons.             SimplePattern1      ::= SimplePattern2 "::" SimplePattern1 ;
PatTuple.            SimplePattern       ::= PTuple ;

coercions            SimplePattern       2 ;
separator            SimplePattern       "" ;

token OperatorF (["~!?"] (["~!?*%/-+^@$&|<>=:"])*) ;
token OperatorD (["*%/"] (["~!?*%/-+^@$&|<>=:"])*) ;
token OperatorE ({"**"} (["~!?*%/-+^@$&|<>=:"])*) ;
token OperatorC (["+-"] (["~!?*%/-+^@$&|<>=:"])*) ;
token OperatorB (["@^"] (["~!?*%/-+^@$&|<>=:"])*) ;
token OperatorA (["$&|<>=:"] (["~!?*%/-+^@$&|<>=:"])*) ;

OperatorDS. OperatorDS ::= "*" ;

OperatorAnyF.  OperatorAny ::= OperatorF ;
OperatorAnyE.  OperatorAny ::= OperatorE ;
OperatorAnyDS.  OperatorAny ::= OperatorDS ;
OperatorAnyD.  OperatorAny ::= OperatorD ;
OperatorAnyC.  OperatorAny ::= OperatorC ;
OperatorAnyB.  OperatorAny ::= OperatorB ;
OperatorAnyA.  OperatorAny ::= OperatorA ;

ExprCompl.           Expression7         ::= "(" ComplexExpression ")" ;
ExprList.            Expression7         ::= DList ;
ExprRecord.          Expression7         ::= DataRecord ;
ExprConst.           Expression7         ::= Constant ;
ExprVar.             Expression7         ::= Ident ;

ExprCall.            Expression6       ::= Expression7 SimpleExpression [SimpleExpression] ;

ExprSel.             Expression6         ::= Expression6 "." Ident ;
Expr6.               Expression5         ::= OperatorF Expression6 ;
Expr5.               Expression4         ::= Expression4 OperatorE Expression5 ;
Expr4S.               Expression3         ::= Expression3 OperatorDS Expression4 ;
Expr4.               Expression3         ::= Expression3 OperatorD Expression4 ;
Expr3.               Expression2         ::= Expression2 OperatorC Expression3 ;
Expr2.               Expression1         ::= Expression2 OperatorB Expression1 ;
Expr1.               Expression          ::= Expression1 OperatorA Expression ;

ExprSemi.             Expression         ::= Expression1 "~" Expression ;
coercions            Expression          7 ;

ESConst.             SimpleExpression    ::= Constant ;
ESIdent.             SimpleExpression    ::= Ident ;
ESExpr.              SimpleExpression    ::= "(" ComplexExpression ")" ;
ESList.              SimpleExpression    ::= DList ;
ESRecord.            SimpleExpression    ::= DataRecord ;
separator            SimpleExpression    "" ;

ECExpr.              ComplexExpression   ::= Expression ;
ECTuple.             ComplexExpression   ::= DTuple ;
ECFun.               ComplexExpression   ::= "fun" SimplePattern [SimplePattern] "->" ComplexExpression ;
ECLet.               ComplexExpression   ::= "let" LetRecKeyword SimplePattern [SimplePattern] TypeConstraint "=" ComplexExpression "in" ComplexExpression ;
ECLetOperator.       ComplexExpression   ::= "let" LetRecKeyword "(" OperatorAny ")" [SimplePattern] "=" ComplexExpression "in" ComplexExpression ;
ECFunction.          ComplexExpression   ::= "function" PipeKeyword [MatchClause] ;
ECMatch.             ComplexExpression   ::= "match" ComplexExpression "with" PipeKeyword [MatchClause] ;
ECIf.                ComplexExpression   ::= "if" ComplexExpression "then" ComplexExpression "else" ComplexExpression ;
ECWhile.             ComplexExpression   ::= "while" ComplexExpression "do" ComplexExpression "done" ;
ECFor.               ComplexExpression   ::= "for" Ident "=" ComplexExpression ForDirection ComplexExpression "do" ComplexExpression "done" ;

LetRecNo.            LetRecKeyword       ::= "" ;
LetRecYes.           LetRecKeyword       ::= "rec" ;

PipeKeywordYes.      PipeKeyword         ::= "|" ;
PipeKeywordNo.      PipeKeyword          ::= "" ;

MatchClause.         MatchClause         ::=  SimplePattern "->" ComplexExpression ;
separator nonempty   MatchClause         "|" ;

DataRecord.          DataRecord          ::= "{" [RecordElement] "}" ;
RecordElement.       RecordElement       ::= Ident "=" ComplexExpression ;
separator nonempty   RecordElement       ";" ;

DList.               DList               ::= "[" [ListElement] "]" ;
ListElement.         ListElement         ::= ComplexExpression ;
separator            ListElement         ";" ;

DTuple.              DTuple              ::= DTupleElement "," [DTupleElement] ;
DTupleElement.       DTupleElement       ::= Expression ;
separator nonempty   DTupleElement       "," ;

ForDirTo.            ForDirection        ::= "to" ;
ForDirDownTo.        ForDirection        ::= "downto" ;

CInt.                Constant            ::= Integer ;
CString.             Constant            ::= String ;
CBool.               Constant            ::= ConstantBool ;

CBTrue.              ConstantBool        ::= "true" ;
CBFalse.             ConstantBool        ::= "false" ;

