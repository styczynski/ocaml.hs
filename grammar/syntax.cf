IRoot.          Implementation      ::= ImplPhrase ";;" ;

IPhrase.        ImplPhrase          ::= ComplexExpression ;

PatIdent.       SimplePattern       ::= Ident ;
PatConst.       SimplePattern       ::= Constant ;
PatNested.      SimplePattern       ::= "(" SimplePattern ")" ;
PatNone.        SimplePattern       ::= "_" ;
separator       SimplePattern       "" ;

ExprConst.      Expression6         ::= Constant ;
ExprCall.       Expression6         ::= Ident [SimpleExpression];
Expr6.          Expression5         ::= PrefixOperator Expression6 ;
Expr5.          Expression4         ::= Expression4 InfixOperatorE Expression5 ;
Expr4.          Expression3         ::= Expression3 InfixOperatorD Expression4 ;
Expr3.          Expression2         ::= Expression2 InfixOperatorC Expression3 ;
Expr2.          Expression1         ::= Expression2 InfixOperatorB Expression1 ;
Expr1.          Expression          ::= Expression1 InfixOperatorA Expression ;

coercions Expression 6 ;

ESConst.        SimpleExpression    ::= Constant ;
ESIdent.        SimpleExpression    ::= Ident ;
ESExpr.         SimpleExpression    ::= "(" Expression ")" ;
separator SimpleExpression "" ;

ECExpr.          ComplexExpression       ::= Expression ;
ECFun.           ComplexExpression       ::= "fun" SimplePattern [SimplePattern] "->" ComplexExpression ;
ECLet.          ComplexExpression       ::= "let" SimplePattern [SimplePattern] "=" ComplexExpression "in" ComplexExpression ;
ECIf.            ComplexExpression       ::= "if" ComplexExpression "then" ComplexExpression ;
ECWhile.         ComplexExpression       ::= "while" ComplexExpression "do" ComplexExpression "done" ;
ECFor.           ComplexExpression       ::= "for" Ident "=" ComplexExpression ForDirection ComplexExpression "do" ComplexExpression "done" ;

ForDirTo.       ForDirection        ::= "to" ;
ForDirDownTo.   ForDirection        ::= "downto" ;

OpOr.           InfixOperatorA      ::= "||" ;
OpAnd.          InfixOperatorB      ::= "&&" ;
OpEq.           InfixOperatorC      ::= "=" ;
OpEqSt.         InfixOperatorC      ::= "==" ;
OpNEq.          InfixOperatorC      ::= "<>" ;
OpNEqSt.        InfixOperatorC      ::= "!=" ;
OpLt.           InfixOperatorC      ::= "<" ;
OpLtD.          InfixOperatorC      ::= "<." ;
OpGt.           InfixOperatorC      ::= ">" ;
OpGtD.          InfixOperatorC      ::= ">." ;
OpLtEq.         InfixOperatorC      ::= "<=" ;
OpLtEqD.        InfixOperatorC      ::= "<=." ;
OpGtEq.         InfixOperatorC      ::= ">=" ;
OpGtEqD.        InfixOperatorC      ::= ">=." ;
OpAdd.          InfixOperatorD      ::= "+" ;
OpAddD.         InfixOperatorD      ::= "+." ;
OpSub.          InfixOperatorD      ::= "-" ;
OpSubD.         InfixOperatorD      ::= "-." ;
OpMul.          InfixOperatorE      ::= "*" ;
OpDiv.          InfixOperatorE      ::= "/" ;
OpNot.          PrefixOperator      ::= "!" ;
OpNeg.          PrefixOperator      ::= "-" ;
OpNegD.         PrefixOperator      ::= "-." ;

CInt.           Constant            ::= Integer ;
CString.        Constant            ::= String ;
CBool.          Constant            ::= ConstantBool ;

CBTrue.         ConstantBool        ::= "true" ;
CBFalse.        ConstantBool        ::= "false" ;

